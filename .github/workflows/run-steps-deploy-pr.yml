name: Gerar tag e realizar deploy

on:
  pull_request:
    types:
      - closed

jobs:
  deployment:
    runs-on: ubuntu-latest

    env:
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_HOST: ${{ secrets.NEXUS_HOST }}

    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v2

    - name: Informar inicio do Deploy no PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚è≥Ô∏é Iniciando deploy...'
            })

    - name: Configurar ambiente
      uses: actions/setup-java@v3.13.0
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven

    - name: copiar settings-conatus-repository.xml
      run: |
        envsubst < devops/settings-conatus-repository.xml > $HOME/.m2/settings.xml
        export MAVEN_HOME=$HOME/.m2/settings.xml

    - name: Configurar gcloud
      uses: google-github-actions/setup-gcloud@v0.3.0
      with:
        project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
        service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
        export_default_credentials: true

    - name: Gerar Tag e Fazer Deploy
      if: github.event.pull_request.merged == true
      run: |
        # Obt√©m a vers√£o do application.properties
        VERSION=$(grep 'conatus.versao' "./src/main/resources/application.properties" | cut -d'=' -f2)

        # Gerar uma tag com a vers√£o do application.properties
        git tag $VERSION
        git push origin $VERSION

        # Obt√©m o artifactId do projeto Maven
        ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)

        # Configurar o nome do arquivo JAR com base no artifactId e vers√£o
        JAR_NAME="$ARTIFACT_ID-$VERSION.jar"

        # Realiza o build do projeto e especifica o nome do arquivo JAR
        mvn clean compile install -U -DskipTests -Dmaven.finalName=$JAR_NAME

        # Atualiza o arquivo POM com a vers√£o correta antes do deploy
        mvn versions:set -DnewVersion=$VERSION

        # Realiza o deploy no Nexus usando o perfil nexus e especifica o nome do arquivo JAR
        mvn deploy -DskipTests -Pnexus -Dfile=target/$JAR_NAME -DpomFile=pom.xml -DaltDeploymentRepository=nexus::default::http://${NEXUS_HOST}/repository/mvn-conatus-sa/

        # Copia o JAR  para o servidor
        sshpass -p ${{ secrets.SERVER_PASSWORD }} scp -P 4000 -o StrictHostKeyChecking=no ./target/$JAR_NAME ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:${{ secrets.DEST_PATH }}
    
    - name: Finalizar Servico Em Execucao
      run: |
        # Executar comandos no servidor Windows usando appleboy/ssh-action
        sshpass -p ${{ secrets.SERVER_PASSWORD }} ssh -p 4000 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "cd ${{ secrets.DEVOPS_PATH }} && finalizar-servico.bat 8090"

    - name: Iniciar servico
      run: |  
        # Iniciar o JAR em segundo plano
        sshpass -p ${{ secrets.SERVER_PASSWORD }} ssh -p 4000 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "powershell Invoke-WmiMethod -Path 'Win32_Process' -Name Create -ArgumentList '${{ secrets.DEVOPS_PATH }}\\iniciar-servico.bat ${{ secrets.DEST_PATH }}\\$JAR_NAME -a -b bar'"

    - name: Informar fim do deploy no PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ O Pull Request foi implantado com sucesso no ambiente'
            })
